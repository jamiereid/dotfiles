#+TITLE:  Emacs Configuration
#+AUTHOR: Jamie Reid
#+EMAIL:  jamie@jre.id.au
#+DATE:   2018 Mar 11
#+TAGS:   emacs

* Custom Variables
Set up =user-emacs-directory= that we use in other places.
#+BEGIN_SRC emacs-lisp
(defconst user-init-dir
            (cond ((boundp 'user-emacs-directory)
                            user-emacs-directory)
                          ((boundp 'user-init-directory)
                                    user-init-directory)
                                  (t "~/.emacs.d/")))
#+END_SRC
* Load Path
I have some custom lisp functions I like to use. The follow line makes sure my =~/.emacs.d/lisp= directory is part of the load path.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "lisp/"))
#+END_SRC

Add the theme directory store in my dotfiles to the load path.
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))
#+END_SRC
* Custom Functions
#+BEGIN_SRC emacs-lisp
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets."
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun air-pop-to-org-agenda (&optional split)
  "Visit the org agenda, in the current window or a SPLIT."
  (interactive "P")
  (org-agenda nil "d")
  (when (not split)
    (delete-other-windows)))
#+END_SRC
	
* General
** Dropings
Emacs likes to leave it's droppings (backup and working files) in the working directory. I much prefer to have these hidden away in =~/.emacs-tmp=

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
    `((",*" . ,"~/.emacs-tmp/")))
(setq auto-save-file-name-transforms
    `((".*" ,"~/.emacs-tmp/" t)))
#+END_SRC

** Interface tidy up
I don't need to see the splash screen every time I open emacs.
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

I don't want to see the menu bar - it just takes up screen real estate and serves as a distraction.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

Here we turn off some window system specific things; but of course, we only need to do that if we're running
in a window system such as X.
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
    (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1)))
#+END_SRC

** UI Tweaks
Highlight the matching paren (or other character) for the one under the cursor.
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(set-face-background 'show-paren-match "#aaaaaa")
(set-face-attribute 'show-paren-match nil 
        :weight 'bold :underline nil :overline nil :slant 'normal)
#+END_SRC

It can sometimes be useful to see the current column number in the mode line.
#+BEGIN_SRC emacs-lisp
(column-number-mode 1)
#+END_SRC

I almost always want line numbers, so let's turn that on (and make it a little more readable) for every buffer...
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
(setq linum-format " %3i ")
#+END_SRC

...and then use a [[file:lisp/linum-off.el][custom bit of lisp]] from [[https://github.com/mattfidler/linum-off][Matt Fidler's github]] to turn it off for some buffers and modes (eg. =*scratch*= buffers and org-mode). We could customise these modes using the =linum-disabled-modes-list= variable, but the defaults are good.
#+BEGIN_SRC emacs-lisp
(require 'linum-off)
#+END_SRC

Visual Line Mode turns on word-wrapping and rebinds C-a, C-e, and C-k to commands that operate on visual lines instead of logical ones.
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode 1)
#+END_SRC

Theme settings
#+BEGIN_SRC emacs-lisp
;; load theme
(load-theme 'zenburn t)

;; default font
(set-default-font "Essential PragmataPro-12")
#+END_SRC

** ><><><><><><
Spaces are the One and Only Way. =setq-default= is used to allow overriding using a local buffer variable.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

Magically insert a closing delimiter when an opening one is inserted.
#+BEGIN_SRC emacs-lisp
(electric-pair-mode 1)
#+END_SRC

Reload files if changed on disk but not in the buffer.
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Some key(re)bindings
Buffer-menu
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'buffer-menu)
#+END_SRC

The following keybinding allows me to indent regions of code without having to first mark it.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 'indent-region)
#+END_SRC

Set up some nice keybindings for changing the size of windows.
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x <up>") 'shrink-window)
(global-set-key (kbd "C-x <down>") 'enlarge-window)
(global-set-key (kbd "C-x <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-x <right>") 'enlarge-window-horizontally)
#+END_SRC

* Packages
** ivy
=ivy-use-virtual-buffers= adds recent files and bookmarks to the =ivy-switch-buffer=.
=ivy-count-format= displays the current and total number in the collection in the prompt.
#+BEGIN_SRC emacs-lisp
(use-package ivy
  :ensure t
  :diminish ivy-mode
  :config (progn
            (ivy-mode 1)
            (setq ivy-use-virtual-buffers t
                  ivy-count-format "%d/%d "))
  :bind
  (("C-c C-r" . ivy-resume)))
#+END_SRC
** counsel
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)
   ("<f1> f" . counsel-describe-function)
   ("<f1> v" . counsel-describe-variable)
   ("C-c k" . counsel-ag)))
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure t
  :bind (("C-s" . swiper))
  :config
  (progn
    (setq ivy-initial-inputs-alist nil
          ivy-use-virtual-buffers t
          ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))
    (ivy-mode 1)))
#+END_SRC
** org mode
I need to come in here and tidy this up. For now, it's just brute forced.
#+BEGIN_SRC emacs-lisp
(use-package org
  :ensure t
  :init (setq org-src-fontify-natively t     ; pretty code blocks
              org-confirm-babel-evaluate nil ; just run the code (probably safe)
              org-src-tab-acts-natively t
))
#+END_SRC

(setq debug-on-error t)

(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org)

; Load modules
;(setq org-modules (quote (org-habit)))

(setq org-directory "~/org/")
(setq org-agenda-files (quote ("~/org")))

;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; Custom Key Bindings
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-ct" 'air-pop-to-org-agenda)

;; Todo
(setq org-log-done (quote time))
(setq org-log-redeadline (quote time))
(setq org-log-reschedule (quote time))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))))
;;(setq org-use-fast-todo-selection t)
;;(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-default-notes-file (concat (file-name-as-directory org-directory) "refile.org"))

(setq org-capture-templates
      (quote (("t" "TODO"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "* TODO %?\n%U\n%a\n")
              ("n" "Note"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "- %? :NOTE:\n%U\n%a\n")
              ("e" "Event"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "* %?\n%U\n")
              ("m" "Meeting"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "* %? :MEETING:\n%U\n"))))

; Automatically place a blank line before a new heading or plain test list item
(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

; Force mark all child tasks as done before parent can be]
(setq org-enforce-todo-dependencies t)

; Automatically place a blank line before a new heading or plain test list item
(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

; Force mark all child tasks as done before parent can be]
(setq org-enforce-todo-dependencies t)

;; Refile settings
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

(setq org-indirect-buffer-display 'current-window)

; Exclude DONE state tasks from refile targets
(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; Archive settings
(setq org-agenda-text-search-extra-files '(agenda-archives))

;; Agenda Settings
(setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-habit)
                          (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))))

;; Habit settings
; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

** org bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :commands (org-bullets-mode)
  :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC
** company mode
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :diminish (company-mode . "CPY")
  :init (global-company-mode)
  :config
  (progn
    (setq company-tooltip-limit 10
          company-idle-delay 0.2
          company-echo-delay 0
          company-minimum-prefix-length 3
          company-require-match nil
          company-selection-wrap-around t
          company-tooltip-align-annotations t
          company-tooltip-flip-when-above t
          company-transformers '(company-sort-by-occurrence))) ; weight by frequency
  :bind
  (:map company-active-map
    ("M-n" . nil)
    ("M-p" . nil)
    ("C-n" . company-select-next)
    ("C-p" . company-select-previous)
    ("TAB" . company-complete-common-or-cycle)
    ("<tab>" . company-complete-common-or-cycle)
    ("S-TAB" . company-select-previous)
    ("<backtab>" . company-select-previous)))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind
  ("C-=" . er/expand-region))
#+END_SRC
** rainbow mode
=rainbow-mode= displays hexadecimal colors with the color they represent as their background.
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :ensure t
  :diminish (rainbow-mode . "")
  :config
  (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** json
#+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode "\\.json\\'"
  :ensure t)
#+END_SRC
** web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :mode ("\\.html\\'"
         "\\.css\\'"
         "\\.php\\'")
  :config
  (progn
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-enable-auto-quoting nil)))
#+END_SRC

* Theming
** Helper functions
#+BEGIN_SRC emacs-lisp
(defun org-src-color-blocks-light ()
  "Colors the block headers and footers to make them stand out more for lighter themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
    ((t (:underline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))
   '(org-block-background
     ((t (:background "#FFFFEA"))))
   '(org-block
     ((t (:background "#FFFFEA"))))
   '(org-block-end-line
     ((t (:overline "#A7A6AA" :foreground "#008ED1" :background "#EAEAFF"))))))

(defun org-src-color-blocks-dark ()
  "Colors the block headers and footers to make them stand out more for dark themes"
  (interactive)
  (custom-set-faces
   '(org-block-begin-line
     ((t (:foreground "#008ED1" :background "#002E41"))))
   '(org-block-background
     ((t (:background "#000000"))))
   '(org-block
     ((t (:background "#000000"))))
   '(org-block-end-line
     ((t (:foreground "#008ED1" :background "#002E41"))))))
#+END_SRC

#+RESULTS:
: org-src-color-blocks-dark

[[https://github.com/howardabrams/dot-files/blob/1939b04e8081c70cf5b22250cb806ec1a23f19fa/emacs-client.org][need to look at this closer]]
#+BEGIN_SRC
(deftheme ha/org-theme "Sub-theme to beautify org mode")
#+END_SRC

#+BEGIN_SRC
(custom-theme-set-faces 'ha/org-theme
                            `(org-agenda-structure ((t (:inherit default :height 2.0 :underline nil))))
                            `(org-verbatim ((t (:inherit 'fixed-pitched :foreground "#aef"))))
                            `(org-table ((t (:inherit 'fixed-pitched))))
                            `(org-block ((t (:inherit 'fixed-pitched))))
                            `(org-block-background ((t (:inherit 'fixed-pitched))))
                            `(org-block-begin-line ((t (:inherit 'fixed-pitched))))
                            `(org-block-end-line ((t (:inherit 'fixed-pitched))))
                            `(org-level-8 ((t (,@headline ,@ha/variable-font-tuple))))
                            `(org-level-7 ((t (,@headline ,@ha/variable-font-tuple))))
                            `(org-level-6 ((t (,@headline ,@ha/variable-font-tuple))))
                            `(org-level-5 ((t (,@headline ,@ha/variable-font-tuple))))
                            `(org-level-4 ((t (,@headline ,@ha/variable-font-tuple
                                                          :height 1.1))))
                            `(org-level-3 ((t (,@headline ,@ha/variable-font-tuple
                                                          :height 1.1))))
                            `(org-level-2 ((t (,@headline ,@ha/variable-font-tuple
                                                          :height 1.1))))
                            `(org-level-1 ((t (,@headline ,@ha/variable-font-tuple
                                                          :height 2.1))))
                            `(org-document-title ((t (,@headline ,@ha/variable-font-tuple :height 1.5 :underline nil)))))
#+END_SRC
* Do I still want this stuff?

;; show which function the pointer is in

(which-function-mode 1)
;;;;;;;;;;;;
;; golang ;;
;;;;;;;;;;;;
(require 'go-mode)
(add-hook 'before-save-hook 'gofmt-before-save)
(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)))
(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd "C-c i") 'go-goto-imports)))

;; The following expects `go get -u github.com/nsf/gocode` to have been run
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))

;;;;;;;;;;;;
;; syntax ;;
;;;;;;;;;;;;
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default
 whitespace-line-column 80
 whitespace-style       '(face lines-tail))
(add-hook 'prog-mode-hook #'whitespace-mode)
