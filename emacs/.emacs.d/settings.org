#+TITLE:  Emacs Configuration
#+AUTHOR: Jamie Reid
#+EMAIL:  jamie@jre.id.au
#+DATE:   2018 Mar 11
#+TAGS:   emacs

* Stuff to move to other file
;; Package init and installation
(require 'package)

;; Repos to use for packages
(setq package-archives '(("melpa" . "http://melpa.org/packages/")
                         ("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("org" . "http://orgmode.org/elpa/")))

* Package List
;; List of packages to ensure is installed
(setq package-list '(auto-complete
                     counsel
                     flycheck
                     go-mode
                     go-autocomplete
                     ivy
                     neotree
                     swiper))

;; set up load-paths and autoloads for installed packages so we can configure them
(package-initialize)

;; fetch available packages
(or
    (file-exists-p package-user-dir)
    (package-refresh-contents))

;; install missing packages
(dolist (package package-list)
    (unless (package-installed-p package)
        (package-install package)))
	
* General
** Dropings
Emacs likes to leave it's droppings (backup and working files) in the working directory. I much prefer to have these hidden away in =~/.emacs-tmp=

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
    `((",*" . ,"~/.emacs-tmp/")))
(setq auto-save-file-name-transforms
    `((".*" ,"~/.emacs-tmp/" t)))
#+END_SRC

** Load Path
I have some custom lisp functions I like to use. The follow line makes sure my =~/.emacs.d/lisp= directory is part of the load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "lisp/"))
#+END_SRC

** Interface tidy up
I don't need to see the splash screen every time I open emacs.
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t)
#+END_SRC

I don't want to see the menu bar - it just takes up screen real estate and serves as a distraction.
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
#+END_SRC

Here we turn off some window system specific things; but of course, we only need to do that if we're running
in a window system such as X.
#+BEGIN_SRC emacs-lisp
(if (display-graphic-p)
    (progn
        (tool-bar-mode -1)
        (scroll-bar-mode -1)))
#+END_SRC

** UI Tweaks
Highlight the matching paren (or other character) for the one under the cursor.
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(set-face-background 'show-paren-match "#aaaaaa")
(set-face-attribute 'show-paren-match nil 
        :weight 'bold :underline nil :overline nil :slant 'normal)
#+END_SRC


#+BEGIN_SRC emacs-lisp
;; show column numbers in status bar
(column-number-mode 1)

;; turn linum-mode on globally
(global-linum-mode t)

;; but also turn if off for some modes (scratch, orgmode)
(require 'linum-off)

;;make linum more readable
(setq linum-format " %3i ")

;; visual-line-mode
(global-visual-line-mode 1)
#+END_SRC

** ><><><><><><
#+BEGIN_SRC emacs-lisp
;; always indent using spaces
(setq-default indent-tabs-mode nil)

;; automagically add closing paren/bracket/brace/etc
(electric-pair-mode 1)

;; reload files if changed on disk but not in buffer
(global-auto-revert-mode 1)
#+END_SRC

** Autocomplete
#+BEGIN_SRC emacs-lisp
(ac-config-default)
#+END_SRC

* ivy, counsel, and swiper
#+BEGIN_SRC emacs-lisp
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "<f6>") 'ivy-resume)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
(global-set-key (kbd "<f1> f") 'counsel-describe-function)
(global-set-key (kbd "<f1> v") 'counsel-describe-variable)
(global-set-key (kbd "<f1> l") 'counsel-load-library)
(global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
(global-set-key (kbd "<f2> u") 'counsel-unicode-char)
(global-set-key (kbd "C-c g") 'counsel-git)
(global-set-key (kbd "C-c j") 'counsel-git-grep)
(global-set-key (kbd "C-c k") 'counsel-ag)
(global-set-key (kbd "C-x l") 'counsel-locate)
(global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
(define-key read-expression-map (kbd "C-r") 'counsel-expression-history)

;;;;;;;;;;;;;;;;;
;; keybindings ;;
;;;;;;;;;;;;;;;;;

;; other-window is M-o
(global-set-key "\M-o" 'other-window)

;; redefine C-x C-b to buffer-menu
(global-set-key "\C-x\C-b" 'buffer-menu)

;; indent regions more easily
(global-set-key "\C-ci" 'indent-region)

;; resize windows
(global-set-key (kbd "C-x <up>") 'shrink-window)
(global-set-key (kbd "C-x <down>") 'enlarge-window)
(global-set-key (kbd "C-x <left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-x <right>") 'enlarge-window-horizontally)

;;;;;;;;;;;;
;; syntax ;;
;;;;;;;;;;;;
(add-hook 'after-init-hook #'global-flycheck-mode)
(setq-default
 whitespace-line-column 80
 whitespace-style       '(face lines-tail))
(add-hook 'prog-mode-hook #'whitespace-mode)

;;;;;;;;;;;;
;; golang ;;
;;;;;;;;;;;;
(require 'go-mode)
(add-hook 'before-save-hook 'gofmt-before-save)
(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)))
(add-hook 'go-mode-hook (lambda ()
                          (local-set-key (kbd "C-c i") 'go-goto-imports)))

;; The following expects `go get -u github.com/nsf/gocode` to have been run
(defun auto-complete-for-go ()
  (auto-complete-mode 1))
(add-hook 'go-mode-hook 'auto-complete-for-go)

(with-eval-after-load 'go-mode
   (require 'go-autocomplete))

;;;;;;;;;;;;;
;; neotree ;;
;;;;;;;;;;;;;

(require 'neotree)
(global-set-key [f8] 'neotree-toggle)

;;;;;;;;;;;
;; theme ;;
;;;;;;;;;;;

;; set theme path
(add-to-list 'custom-theme-load-path (concat user-emacs-directory "themes/"))

;; load theme
(load-theme 'zenburn t)

;; default font
(set-default-font "Essential PragmataPro-12")

;;;;;;;;;;;;;;;
;; mode line ;;
;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;
;; org-mode ;;
;;;;;;;;;;;;;;

(setq debug-on-error t)

(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
(require 'org)

; Load modules
;(setq org-modules (quote (org-habit)))

(setq org-directory "~/org/")
(setq org-agenda-files (quote ("~/org")))

;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

;; Custom Key Bindings
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
(define-key global-map "\C-ct" 'air-pop-to-org-agenda)

;; Todo
(setq org-log-done (quote time))
(setq org-log-redeadline (quote time))
(setq org-log-reschedule (quote time))

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))))
;;(setq org-use-fast-todo-selection t)
;;(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-default-notes-file (concat (file-name-as-directory org-directory) "refile.org"))

(setq org-capture-templates
      (quote (("t" "TODO"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "* TODO %?\n%U\n%a\n")
              ("n" "Note"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "- %? :NOTE:\n%U\n%a\n")
              ("e" "Event"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "* %?\n%U\n")
              ("m" "Meeting"
               entry (file+datetree (concat
                                     (file-name-as-directory org-directory)
                                     "journal.org"))
               "* %? :MEETING:\n%U\n"))))

; Automatically place a blank line before a new heading or plain test list item
(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

; Force mark all child tasks as done before parent can be]
(setq org-enforce-todo-dependencies t)

; Automatically place a blank line before a new heading or plain test list item
(setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))

; Force mark all child tasks as done before parent can be]
(setq org-enforce-todo-dependencies t)

;; Refile settings
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Use full outline paths for refile targets
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

(setq org-indirect-buffer-display 'current-window)

; Exclude DONE state tasks from refile targets
(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; Archive settings
(setq org-agenda-text-search-extra-files '(agenda-archives))

;; Agenda Settings
(setq org-agenda-custom-commands
      '(("d" "Daily agenda and all TODOs"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "" ((org-agenda-ndays 1)))
          (alltodo ""
                   ((org-agenda-skip-function
                     '(or (air-org-skip-subtree-if-habit)
                          (air-org-skip-subtree-if-priority ?A)
                          (org-agenda-skip-if nil '(scheduled deadline))))
                    (org-agenda-overriding-header "ALL normal priority tasks:"))))
         ((org-agenda-compact-blocks t)))))

;; Habit settings
; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 50)

(provide 'orgsettings)
;;; orgsettings.el ends here
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))

(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets."
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))

(defun air-pop-to-org-agenda (&optional split)
  "Visit the org agenda, in the current window or a SPLIT."
  (interactive "P")
  (org-agenda nil "d")
  (when (not split)
    (delete-other-windows)))
#+END_SRC

* Do I still want this stuff?
#+BEGIN_SRC emacs-lisp
;; show which function the pointer is in
(which-function-mode 1)
#+END_SRC
