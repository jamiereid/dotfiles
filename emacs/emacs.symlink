;; -*- mode: elisp -*-

;;; VARIABLES
(cond ((string= system-name "CALM-W-JAMIE") (setq org-base-path "D:/jreid/Google Drive/Documents/orgmode"))
      (t (setq org-base-path (expand-file-name "~/Google Drive/Documents/orgmode"))))


;;; Load package manager and add sources
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)

;(add-to-list 'package-archives
;    '("Marmalade" .
;      "Http://Marmalade-Repo.Org/Packages/"))
(package-initialize)

;;; Update Load paths
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(add-to-list 'load-path "~/.emacs.d/lisp")

;;; Theme/font/etc settings
(load-theme 'zenburn t)
(set-default-font "Droid Sans Mono-8")
(setq inhibit-splash-screen t) ; disable splash
(when (window-system)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))

(when (window-system)
  (require 'git-gutter-fringe))

(global-git-gutter-mode +1)
(setq-default indicate-buffer-boundaries 'left)
(setq-default indicate-empty-lines +1)

;;; Hide droppings
(setq backup-directory-alist `((".*" . ,"~/.emacs-tmp/")))
(setq auto-save-file-name-transforms `((".*" ,"~/.emacs-tmp/" t)))

;;; Misc Settings
(global-visual-line-mode 1) ; visual-line-mode
(setq kill-whole-line t) ; kill whole line (more like vi's dd)
(global-auto-revert-mode 1) ; Reload files if they have changed on disk but not in the buffer

;;; org-mode configuration
(require 'org) ; Enable org-mode
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode)) ; load for files ending in .org

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)

(setq org-log-done t)
(setq org-use-fast-todo-selection t) ; Turns on fast state selection

(setq org-refile-path (format "%s/%s" org-base-path "refile.org"))
(setq org-default-notes-file org-refile-path)

(setq org-agenda-files (list org-refile-path
                             (format "%s/%s" org-base-path "work.org")
			     (format "%s/%s" org-base-path "home.org")
			     (format "%s/%s" org-base-path "projects.org")
			     (format "%s/%s" org-base-path "bts.org")
			     (format "%s/%s" org-base-path "notes.org")
			     (format "%s/%s" org-base-path "mhv.org")))

(setq org-capture-templates
      '(("w" "Work" entry (file org-refile-path)
         "* TODO %? :WORK:\n ADDED:%U")
	     ("h" "Home" entry (file org-refile-path)
         "* TODO %? \n ADDED:%U")
	     ("b" "BtS" entry (file org-refile-path)
         "* TODO %? \n ADDED:%U")
	     ("m" "MHV" entry (file org-refile-path)
         "* TODO %? \n ADDED:%U")
	     ("p" "Projects" entry (file org-refile-path)
         "* TODO %? \n ADDED:%U")
	     ("n" "Notes" entry (file (format "%s/%s" org-base-path "notes.org"))
         "* %?\n ADDED:%U")))

(setq org-todo-keywords
       '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)" "|" "DONE(d)" "CANCELLED(c)"))) ; TODO sequences

(setq org-refile-use-outline-path t) ; Full outline paths for refile targets - we file directly with IDO
(setq org-outline-path-complete-in-steps nil) ; Targets complete directly with IDO
(setq org-refile-allow-creating-parent-nodes (quote confirm)) ; Allow refile to create parent tasks with confirmation

; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

;; Recursive events settings
(setq org-log-done t)
(setq org-log-repeat "time")

;; refresh agenda view regurally
(defun kiwon/org-agenda-redo-in-other-window ()
  "Call org-agenda-redo function even in the non-agenda buffer."
  (interactive)
  (let ((agenda-window (get-buffer-window org-agenda-buffer-name t)))
    (when agenda-window
      (with-selected-window agenda-window (org-agenda-redo)))))
(run-at-time nil 60 'kiwon/org-agenda-redo-in-other-window)

;;; IDO settings
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
(setq ido-default-file-method 'selected-window) ; Use the current window when visiting files and buffers with ido
(setq ido-default-buffer-method 'selected-window) ; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

